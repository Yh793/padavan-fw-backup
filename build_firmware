#!/bin/sh

ROOTDIR=`pwd`
export ROOTDIR=$ROOTDIR

if [ ! -f "$ROOTDIR/.config" ] ; then
	cp -fv "$ROOTDIR/configs/project.config" "$ROOTDIR/.config"
fi

if [ ! -f "$ROOTDIR/.config" ] ; then
	echo "Project config file .config not found! Terminate."
	exit 1
fi

. $ROOTDIR/.config

if [ ! -f "$ROOTDIR/vendors/Ralink/$CONFIG_PRODUCT/config.arch" ] ; then
	echo "Project product dir ($CONFIG_PRODUCT) not found! Terminate."
	exit 1
fi

if [ ! -d "$ROOTDIR/$CONFIG_LINUXDIR" ] ; then
	echo "Project Linux Kernel dir ($CONFIG_LINUXDIR) not found! Terminate."
	exit 1
fi

kernel_3x=0
kernel_id="2.6.21.x"
kernel_cf=""
uclibc_id="0.9.28.3"
busybox_id="1.20.2"
busybox_cf=""
if [ "$CONFIG_LINUXDIR" = "linux-3.0.x" ] ; then
	kernel_3x=1
	kernel_id="3.0.x"
	uclibc_id="0.9.33.2"
fi

if [ "$CONFIG_FIRMWARE_ENABLE_IPV6" = "y" ] ; then
	if [ "$CONFIG_FIRMWARE_TYPE_ROOTFS_IN_RAM" = "y" ] ; then
		kernel_cf="$ROOTDIR/configs/IPv6/$CONFIG_FIRMWARE_PRODUCT_ID/kernel-${kernel_id}.ram.config"
	else
		kernel_cf="$ROOTDIR/configs/IPv6/$CONFIG_FIRMWARE_PRODUCT_ID/kernel-${kernel_id}.config"
	fi
	busybox_cf="$ROOTDIR/configs/IPv6/busybox.config"
else
	if [ "$CONFIG_FIRMWARE_TYPE_ROOTFS_IN_RAM" = "y" ] ; then
		kernel_cf="$ROOTDIR/configs/IPv4/$CONFIG_FIRMWARE_PRODUCT_ID/kernel-${kernel_id}.ram.config"
	else
		kernel_cf="$ROOTDIR/configs/IPv4/$CONFIG_FIRMWARE_PRODUCT_ID/kernel-${kernel_id}.config"
	fi
	busybox_cf="$ROOTDIR/configs/IPv4/busybox.config"
fi

if [ ! -f "$kernel_cf" ] ; then
	echo "Target kernel config ($kernel_cf) not found! Terminate."
	exit 1
fi

func_enable_kernel_param()
{
	cfg_file="$ROOTDIR/$CONFIG_LINUXDIR/.config"
	if [ -n "`grep \^\"\# $1 is not set\" $cfg_file`" ] ; then
		sed -i "s/\# $1 is not set/$1=y/" $cfg_file
	fi
}

func_disable_kernel_param()
{
	cfg_file="$ROOTDIR/$CONFIG_LINUXDIR/.config"
	if [ -n "`grep \^$1=y $cfg_file`" ] ; then
		sed -i "s/$1=y/\# $1 is not set/" $cfg_file
	elif [ -n "`grep \^$1=m $cfg_file`" ] ; then
		sed -i "s/$1=m/\# $1 is not set/" $cfg_file
	fi
}

rm -rfv $ROOTDIR/romfs
rm -rfv $ROOTDIR/images
mkdir -p $ROOTDIR/romfs
mkdir -p $ROOTDIR/images

echo --------------------------------COPY-CONFIG-----------------------------
##############################FOR-ALL-DEVICES#########################
cp -fv "$ROOTDIR/configs/uClibc-${uclibc_id}.config" "$ROOTDIR/libc/uClibc-${uclibc_id}/.config"
ln -sf vendors/Ralink/$CONFIG_PRODUCT/config.arch config.arch
#######################################################################
cp -fv "$kernel_cf" "$ROOTDIR/$CONFIG_LINUXDIR/.config"
cp -fv "$busybox_cf" "$ROOTDIR/user/busybox/busybox-${busybox_id}/.config"
#######################################################################
if [ "$CONFIG_FIRMWARE_USE_RAETH_N65U" = "y" ] ; then
	if [ $kernel_3x -eq 1 ] ; then
		CONFIG_FIRMWARE_USE_SINGLE_RGMII=y
		func_enable_kernel_param "CONFIG_RAETH_ASUS_N65U_OBJ"
	fi
else
	func_disable_kernel_param "CONFIG_RAETH_ASUS_N65U_OBJ"
fi
if [ "$CONFIG_FIRMWARE_USE_SINGLE_RGMII" = "y" ] ; then
	func_disable_kernel_param "CONFIG_RAETH_GMAC2"
	func_disable_kernel_param "CONFIG_GE2_RGMII_FORCE_1000"
	if [ $kernel_3x -eq 0 ] ; then
		func_enable_kernel_param "CONFIG_RAETH_NAPI"
	fi
fi
if [ "$CONFIG_FIRMWARE_ENABLE_XFS" != "y" ] && [ $kernel_3x -eq 1 ] ; then
	func_disable_kernel_param "CONFIG_XFS_FS"
fi
if [ "$CONFIG_FIRMWARE_ENABLE_HFSPLUS" != "y" ] && [ $kernel_3x -eq 1 ] ; then
	func_disable_kernel_param "CONFIG_HFSPLUS_FS"
fi
if [ "$CONFIG_FIRMWARE_ENABLE_UVC" != "y" ] ; then
	if [ $kernel_3x -eq 1 ] ; then
		func_disable_kernel_param "CONFIG_MEDIA_SUPPORT"
	else
		func_disable_kernel_param "CONFIG_VIDEO_DEV"
	fi
fi
#######################################################################
echo ---------------------------------MAKE-DEP--------------------------------
make dep
echo ---------------------------------MAKE-ALL--------------------------------
make
