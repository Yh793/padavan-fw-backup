#!/bin/sh

ROOTDIR=`pwd`
export ROOTDIR=$ROOTDIR

if [ ! -f "$ROOTDIR/.config" ] ; then
	cp -fv "$ROOTDIR/configs/n56u_full.config" "$ROOTDIR/.config"
fi

if [ ! -f "$ROOTDIR/.config" ] ; then
	echo "Project config file .config not found! Terminate."
	exit 1
fi

. $ROOTDIR/.config

if [ ! -f "$ROOTDIR/vendors/Ralink/$CONFIG_PRODUCT/config.arch" ] ; then
	echo "Project product dir ($CONFIG_PRODUCT) not found! Terminate."
	exit 1
fi

if [ ! -d "$ROOTDIR/$CONFIG_LINUXDIR" ] ; then
	echo "Project Linux Kernel dir ($CONFIG_LINUXDIR) not found! Terminate."
	exit 1
fi

kernel_id="3.0.x"
kernel_cf=""
uclibc_id="0.9.33.2"
uclibc_cf=""
busybox_id="1.21.1"
busybox_cf=""
paragon_hfsplus=1
paragon_blob=0

if [ "$CONFIG_LINUXDIR" = "linux-3.4.x" ] ; then
	kernel_id="3.4.x"
fi

if [ "$CONFIG_FIRMWARE_ENABLE_IPV6" = "y" ] ; then
	if [ "$CONFIG_FIRMWARE_TYPE_ROOTFS_IN_RAM" = "y" ] ; then
		kernel_cf="$ROOTDIR/configs/IPv6/$CONFIG_FIRMWARE_PRODUCT_ID/kernel-${kernel_id}.ram.config"
	else
		kernel_cf="$ROOTDIR/configs/IPv6/$CONFIG_FIRMWARE_PRODUCT_ID/kernel-${kernel_id}.config"
	fi
	uclibc_cf="$ROOTDIR/configs/IPv6/uClibc-${uclibc_id}.config"
	busybox_cf="$ROOTDIR/configs/IPv6/busybox.config"
else
	if [ "$CONFIG_FIRMWARE_TYPE_ROOTFS_IN_RAM" = "y" ] ; then
		kernel_cf="$ROOTDIR/configs/IPv4/$CONFIG_FIRMWARE_PRODUCT_ID/kernel-${kernel_id}.ram.config"
	else
		kernel_cf="$ROOTDIR/configs/IPv4/$CONFIG_FIRMWARE_PRODUCT_ID/kernel-${kernel_id}.config"
	fi
	uclibc_cf="$ROOTDIR/configs/IPv4/uClibc-${uclibc_id}.config"
	busybox_cf="$ROOTDIR/configs/IPv4/busybox.config"
fi

if [ ! -f "$kernel_cf" ] ; then
	echo "Target kernel config ($kernel_cf) not found! Terminate."
	exit 1
fi

if [ ! -f "$uclibc_cf" ] ; then
	echo "Target uClibc config ($uclibc_cf) not found! Terminate."
	exit 1
fi

func_enable_kernel_param()
{
	cfg_file="$ROOTDIR/$CONFIG_LINUXDIR/.config"
	if [ -n "`grep \^\"\# $1 is not set\" $cfg_file`" ] ; then
		sed -i "s/\# $1 is not set/$1=y/" $cfg_file
	fi
}

func_disable_kernel_param()
{
	cfg_file="$ROOTDIR/$CONFIG_LINUXDIR/.config"
	if [ -n "`grep \^$1=y $cfg_file`" ] ; then
		sed -i "s/$1=y/\# $1 is not set/" $cfg_file
	elif [ -n "`grep \^$1=m $cfg_file`" ] ; then
		sed -i "s/$1=m/\# $1 is not set/" $cfg_file
	fi
}

func_disable_busybox_param()
{
	cfg_file="$ROOTDIR/user/busybox/busybox-${busybox_id}/.config"
	if [ -n "`grep \^$1=y $cfg_file`" ] ; then
		sed -i "s/$1=y/\# $1 is not set/" $cfg_file
	fi
}

rm -rf $ROOTDIR/romfs
rm -rf $ROOTDIR/images
mkdir -p $ROOTDIR/romfs
mkdir -p $ROOTDIR/images

echo --------------------------COPY-CONFIG-----------------------------
######################### FOR-ALL-DEVICES #############################
ln -sf vendors/Ralink/$CONFIG_PRODUCT/config.arch config.arch
#######################################################################
cp -f "$kernel_cf" "$ROOTDIR/$CONFIG_LINUXDIR/.config"
cp -f "$uclibc_cf" "$ROOTDIR/libc/uClibc-${uclibc_id}/.config"
cp -f "$busybox_cf" "$ROOTDIR/user/busybox/busybox-${busybox_id}/.config"
############################# WI-FI ###################################
dir_wifi_src="$ROOTDIR/proprietary/rt_wifi"
dir_wifi_dst="$ROOTDIR/$CONFIG_LINUXDIR/drivers/net/wireless"
rm -rf "$dir_wifi_dst/rt2860v2"
rm -rf "$dir_wifi_dst/rt2860v2_ap"
if [ "$CONFIG_FIRMWARE_WIFI5_DRIVER" = "2.6" ] ; then
	cp -rf "$dir_wifi_src/rt3883/2.6.X.X/rt2860v2" "$dir_wifi_dst/"
	cp -rf "$dir_wifi_src/rt3883/2.6.X.X/rt2860v2_ap" "$dir_wifi_dst/"
else
	cp -rf "$dir_wifi_src/rt3883/2.4.X.X/rt2860v2" "$dir_wifi_dst/"
	cp -rf "$dir_wifi_src/rt3883/2.4.X.X/rt2860v2_ap" "$dir_wifi_dst/"
fi
if [ "$CONFIG_FIRMWARE_PRODUCT_ID" != "RT-N65U" ] || [ ! -d "$dir_wifi_dst/rt3090_ap" ] ; then
	rm -rf "$dir_wifi_dst/rt3090"
	rm -rf "$dir_wifi_dst/rt3090_ap"
	if [ "$CONFIG_FIRMWARE_WIFI2_DRIVER" = "2.4" ] ; then
		cp -rf "$dir_wifi_src/rt3090/2.4.X.X/rt3090" "$dir_wifi_dst/"
		cp -rf "$dir_wifi_src/rt3090/2.4.X.X/rt3090_ap" "$dir_wifi_dst/"
	elif [ "$CONFIG_FIRMWARE_WIFI2_DRIVER" = "2.7" ] ; then
		cp -rf "$dir_wifi_src/rt3090/2.7.X.X/rt3090" "$dir_wifi_dst/"
		cp -rf "$dir_wifi_src/rt3090/2.7.X.X/rt3090_ap" "$dir_wifi_dst/"
	else
		cp -rf "$dir_wifi_src/rt3090/2.5.X.X/rt3090" "$dir_wifi_dst/"
		cp -rf "$dir_wifi_src/rt3090/2.5.X.X/rt3090_ap" "$dir_wifi_dst/"
	fi
fi
############################ HWNAT ####################################
dir_ppe_src="$ROOTDIR/proprietary/rt_ppe"
dir_ppe_dst="$ROOTDIR/$CONFIG_LINUXDIR/net/nat"
rm -rf "$dir_ppe_dst/hw_nat"
cp -rf "$dir_ppe_src/hw_nat" "$dir_ppe_dst/"
############################ RAETH ####################################
if [ "$CONFIG_FIRMWARE_USE_SINGLE_RGMII" = "y" ] ; then
	func_disable_kernel_param "CONFIG_RAETH_GMAC2"
	func_disable_kernel_param "CONFIG_GE2_RGMII_FORCE_1000"
	func_enable_kernel_param "CONFIG_RAETH_HW_VLAN_TX"
	func_enable_kernel_param "CONFIG_VLAN_8021Q_DOUBLE_TAG"
fi
############################# UFSD ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_UFSD" != "y" ] ; then
	func_disable_kernel_param "CONFIG_MAC_PARTITION"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_HFS"
else
	if [ $paragon_blob -eq 1 ] ; then
		# ufsd 8.6 compiled with acl=on
		func_enable_kernel_param "CONFIG_FS_POSIX_ACL"
	fi
	if [ $paragon_hfsplus -eq 0 ] ; then
		func_disable_kernel_param "CONFIG_MAC_PARTITION"
		func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_HFS"
	fi
fi
############################# FAT #####################################
if [ "$CONFIG_FIRMWARE_ENABLE_FAT" != "y" ] ; then
	func_disable_kernel_param "CONFIG_FAT_FS"
	func_disable_kernel_param "CONFIG_MSDOS_FS"
	func_disable_kernel_param "CONFIG_VFAT_FS"
fi
############################ exFAT ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXFAT" != "y" ] ; then
	func_disable_kernel_param "CONFIG_EXFAT_FS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_EXFAT"
fi
############################# EXT2 ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXT2" != "y" ] ; then
	func_disable_kernel_param "CONFIG_EXT2_FS"
fi
############################# EXT3 ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXT3" != "y" ] ; then
	func_disable_kernel_param "CONFIG_EXT3_FS"
fi
############################# EXT4 ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXT4" != "y" ] ; then
	func_disable_kernel_param "CONFIG_EXT4_FS"
fi
############################# XFS #####################################
if [ "$CONFIG_FIRMWARE_ENABLE_XFS" != "y" ] ; then
	func_disable_kernel_param "CONFIG_XFS_FS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_XFS"
fi
############################# FUSE ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_FUSE" != "y" ] ; then
	func_disable_kernel_param "CONFIG_FUSE_FS"
fi
############################# SWAP ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_SWAP" != "y" ] ; then
	func_disable_kernel_param "CONFIG_SWAP"
	func_disable_busybox_param "CONFIG_MKSWAP"
	func_disable_busybox_param "CONFIG_SWAPONOFF"
fi
############################ IPSET ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_IPSET" != "y" ] ; then
	func_disable_kernel_param "CONFIG_NETFILTER_NETLINK"
fi
############################# QOS #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_QOS" != "y" ] ; then
	func_disable_kernel_param "CONFIG_NET_SCHED"
	func_disable_kernel_param "CONFIG_NET_CLS"
	func_disable_kernel_param "CONFIG_NETFILTER_XT_TARGET_CLASSIFY"
	func_disable_kernel_param "CONFIG_NETFILTER_XT_TARGET_IMQ"
	func_disable_kernel_param "CONFIG_IMQ"
fi
############################# IMQ #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_IMQ" != "y" ] ; then
	func_disable_kernel_param "CONFIG_NETFILTER_XT_TARGET_IMQ"
	func_disable_kernel_param "CONFIG_IMQ"
fi
############################# IFB #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_IFB" != "y" ] ; then
	func_disable_kernel_param "CONFIG_NET_SCH_INGRESS"
	func_disable_kernel_param "CONFIG_NET_CLS_ACT"
	func_disable_kernel_param "CONFIG_IFB"
fi
############################# UVC #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_UVC" != "y" ] ; then
	func_disable_kernel_param "CONFIG_MEDIA_SUPPORT"
fi
############################# HID #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_HID" != "y" ] ; then
	func_disable_kernel_param "CONFIG_INPUT"
	func_disable_kernel_param "CONFIG_HID_SUPPORT"
	func_disable_kernel_param "CONFIG_USB_HID"
fi
############################# UART ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_SERIAL" != "y" ] ; then
	func_disable_kernel_param "CONFIG_USB_SERIAL_CH341"
	func_disable_kernel_param "CONFIG_USB_SERIAL_PL2303"
fi
############################# NFSD ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_NFSD" != "y" ] ; then
	func_disable_kernel_param "CONFIG_NFSD"
fi
############################# NFSC ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_NFSC" != "y" ] ; then
	func_disable_kernel_param "CONFIG_FSCACHE"
	func_disable_kernel_param "CONFIG_NFS_FS"
fi
############################# CIFS ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_CIFS" != "y" ] ; then
	func_disable_kernel_param "CONFIG_CIFS"
	func_disable_busybox_param "CONFIG_FEATURE_MOUNT_CIFS"
fi
if [ "$CONFIG_FIRMWARE_INCLUDE_NFSD" != "y" -a "$CONFIG_FIRMWARE_INCLUDE_NFSC" != "y" -a "$CONFIG_FIRMWARE_INCLUDE_CIFS" != "y" ] ; then
	func_disable_kernel_param "CONFIG_NETWORK_FILESYSTEMS"
fi
#######################################################################
echo --------------------------MAKE-DEP--------------------------------
make dep
echo --------------------------MAKE-ALL--------------------------------
make
